#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		# [ -n "${s}" ] && s=" [${s}]";
		[ -n "${s}" ] && s=" ${s}";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

# if tput setaf 1 &> /dev/null; then
# 	tput sgr0; # reset colors
# 	bold=$(tput bold);
# 	reset=$(tput sgr0);
# 	# Solarized colors, taken from http://git.io/solarized-colors.
# 	black=$(tput setaf 0);
# 	blue=$(tput setaf 33);
# 	cyan=$(tput setaf 37);
# 	green=$(tput setaf 64);
# 	orange=$(tput setaf 166);
# 	purple=$(tput setaf 125);
# 	red=$(tput setaf 124);
# 	violet=$(tput setaf 61);
# 	white=$(tput setaf 15);
# 	yellow=$(tput setaf 136);
# else
# 	bold='';
# 	reset="\e[0m";
# 	black="\e[1;30m";
# 	blue="\e[1;34m";
# 	cyan="\e[1;36m";
# 	green="\e[1;32m";
# 	orange="\e[1;33m";
# 	purple="\e[1;35m";
# 	red="\e[1;31m";
# 	violet="\e[1;35m";
# 	white="\e[1;37m";
# 	yellow="\e[1;33m";
# fi;

# Colours for Terminal and iTerm2
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtmag='\e[0;35m' # Magenta
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldmag='\e[1;35m' # Magenta
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
bgred='\e[41m'   # Red
bggrn='\e[42m'   # Green
bgylw='\e[43m'   # Yellow
bgblu='\e[44m'   # Blue
bgmag='\e[45m'   # Magenta
bgcyn='\e[46m'   # Cyan
bgwht='\e[47m'   # White
reset='\e[0m'    # Text Reset

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${txtred}";
else
	userStyle="${bldblu}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bldgrn}${txtred}";
else
	hostStyle="${txtylw}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bldgrn}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${txtwht}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${txtwht}\] in ";
PS1+="\[${txtred}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${txtwht}\] on \[${txtgrn}\]\" \"\[${bldylw}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${txtwht}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${txtylw}\]→ \[${reset}\]";
export PS2;


#PS1="\[$bldmag\]\u \[$txtwht\]at \[$txtred\]\h \[$txtwht\]in \[$txtgrn\]\w\[$txtwht\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$txtmag\]\$(parse_git_branch)\[$txtwht\]\n\$ \[$txtrst\]"
